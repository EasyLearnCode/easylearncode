// Generated by CoffeeScript 1.6.3
(function() {
  self.JSREPLEngine = (function() {
    function JSREPLEngine(unused_input, output, result, error, sandbox, ready) {
      var bufferError, output_wrapper, printError, printOutput,
        _this = this;
      this.output = output;
      this.result = result;
      this.error = error;
      this.Python = sandbox.Python;
      sandbox.print = (function() {});
      this.output_buffer = [];
      output_wrapper = function(chr) {
        if (chr != null) {
          _this.output_buffer.push(chr);
          return output(chr);
        }
      };
      printOutput = makeUtf8Print(output_wrapper);
      this.error_buffer = [];
      printError = makeUtf8Print(output);
      bufferError = function(chr) {
        if (chr != null) {
          //if (_this.Python.isHandlingError) {
            return _this.error_buffer.push(String.fromCharCode(chr));
          //} else {
          //  return printError(chr);
          //}
        }
      };
      this.Python.initialize(null, printOutput, bufferError);
      ready();
    }

    JSREPLEngine.prototype.Eval = function(command) {
      var e, result;
      this.error_buffer = [];
      try {
        result = this.Python["eval"](encodeUtf8(command));
        if (result === void 0) {
          return this.error(this.error_buffer.join('') || 'Unknown error.');
        } else {
          this.output(this.error_buffer.join(''));
          return this.result(result);
        }
      } catch (_error) {
        e = _error;
        return this.error('Internal error: ' + e);
      }
    };

    JSREPLEngine.prototype.EasyLearnCode_Eval = function(input) {
      var e, error_str, output_str, result, resultObj;
      try {
        if (input.testScript) {
          this.Python["eval"](encodeUtf8(input.testScript));
        }
        this.error_buffer = [];
        this.output_buffer = [];
        result = this.Python["eval"](encodeUtf8(input.command));
        error_str = this.error_buffer.join('');
        if (result === void 0) {
          return this.error(error_str || 'Unknown error.', input.type);
        } else {
          this.output(error_str);
          output_str = this.output_buffer.join('');
          resultObj = {
            result: result,
            output: output_str,
            code: input.command,
            type: input.type
          };
          return this.result(resultObj);
        }
      } catch (_error) {
        e = _error;
        return this.error('Internal error: ' + e, input.type);
      }
    };

    JSREPLEngine.prototype.RawEval = function(command) {
      return this.Eval(command);
    };

    JSREPLEngine.prototype.GetNextLineIndent = function(command) {
      var indent, last_line, lines;
      lines = command.split('\n');
      if (lines.length === 0) {
        return 0;
      } else {
        last_line = lines[lines.length - 1];
        indent = last_line.match(/^\s*/)[0];
        last_line = lines[lines.length - 1].replace(/\s+$/, '');
        if (last_line[last_line.length - 1] === ':') {
          return 1;
        } else if (indent.length && last_line[last_line.length - 1].length !== 0) {
          return 0;
        } else {
          return false;
        }
      }
    };

    return JSREPLEngine;

  })();

}).call(this);

/*
//@ sourceMappingURL=jsrepl_python.map
*/
